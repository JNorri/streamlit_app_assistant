import numpy as np
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import tensorflow as tf
import warnings
import sys
warnings.filterwarnings("ignore")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
def validate_paths():
    base_path = Path("../project_data/model_data/dataset")
    required_dirs = ['train', 'test', 'validation']
    
    missing = []
    for dir in required_dirs:
        if not (base_path / dir).exists():
            missing.append(dir)
    
    if missing:
        print(f"‚ùå –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(missing)}")
        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: {base_path.resolve()}")
        sys.exit(1)
        
    return base_path

def get_filepaths(base_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    try:
        train_files = list((base_path / "train").glob(r'**/*.jpg'))
        test_files = list((base_path / "test").glob(r'**/*.jpg'))
        val_files = list((base_path / "validation").glob(r'**/*.jpg'))
        
        if not train_files:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ train/")
            sys.exit(1)
            
        return train_files, test_files, val_files
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        sys.exit(1)

def process_path(fp):
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –≤ —Å—Ç—Ä–æ–∫—É
    return str(fp)

def proc_img(filepaths):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –º–µ—Ç–æ–∫ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    if not filepaths:
        return pd.DataFrame(columns=['Filepath', 'Label'])
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∫–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
    labels = [fp.parent.name for fp in filepaths]
    
    return pd.DataFrame({
        'Filepath': [str(fp) for fp in filepaths],
        'Label': labels
    }).sample(frac=1).reset_index(drop=True)

def load_data(base_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –º–µ—Ç–æ–∫"""
    train_path = base_path / "train"
    val_path = base_path / "validation"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å val -> validation
    test_path = base_path / "test"

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    train_files = list(train_path.glob('**/*.jpg'))
    val_files = list(val_path.glob('**/*.jpg'))
    test_files = list(test_path.glob('**/*.jpg'))

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –º–µ—Ç–∫–∞–º–∏
    train_df = proc_img(train_files)
    val_df = proc_img(val_files)
    test_df = proc_img(test_files)

    # –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü load_data –ø–µ—Ä–µ–¥ return
    print("–ü—Ä–∏–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(train_df.head())
    print("\n–ú–µ—Ç–∫–∏ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", train_df['Label'].unique())

    return train_df, val_df, test_df

def save_class_names(train_df):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    if train_df.empty:
        print("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã")
        sys.exit(1)
        
    class_names = sorted(train_df['Label'].unique())
    class_path = Path("model_data/trained_model/class_names.txt")
    class_path.parent.mkdir(exist_ok=True)
    
    with open(class_path, 'w') as f:
        f.write('\n'.join(class_names))
    
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: {len(class_names)}")
    return class_names

def visualize_samples(train_df):
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    if train_df.empty:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    df_unique = train_df.drop_duplicates(subset=["Label"])
    num_classes = len(df_unique)
    
    if num_classes == 0:
        print("‚ö†Ô∏è –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    num_samples = min(36, num_classes)
    df_sample = df_unique.sample(num_samples, replace=False)
    
    rows = int(np.ceil(np.sqrt(num_samples)))
    cols = rows if rows**2 >= num_samples else rows + 1
    
    fig, axes = plt.subplots(rows, cols, figsize=(12, 10))
    axes = axes.flatten() if num_samples > 1 else [axes]
    
    for ax in axes:
        ax.axis('off')
    
    for ax, (_, row) in zip(axes, df_sample.iterrows()):
        ax.imshow(plt.imread(row['Filepath']))
        ax.set_title(row['Label'], fontsize=8)
        ax.axis('on')
    
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    base_path = validate_paths()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    train_files, test_files, val_files = get_filepaths(base_path)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    train_df = proc_img(train_files)
    test_df = proc_img(test_files)
    val_df = proc_img(val_files)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
    class_names = save_class_names(train_df)
    
    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    print(f"–û–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {len(train_df)}")
    print(f"–û–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(test_df)}")
    print(f"–û–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {len(val_df)}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤: {len(class_names)}\n")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    visualize_samples(train_df)


    